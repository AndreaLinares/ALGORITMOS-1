// PRACTICO 1.cpp: define el punto de entrada de la aplicación de consola.
//

#include "stdafx.h"
#include <conio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>
using namespace std;

//Realizar una funcion que reciba como parametros dos numeros naturales, y retorne como resultado un tercer numero que resulta de concatenar (unir) el parametro con valor mayor al parametro con el valor menor.

int contarDigitos(int n){
	int c=0;
	while(n>0){
		n=n/10;
		c++;
	}
	return c;
}

int unirMayorAlMenor(int n1, int n2){
	int d,r;
	if(n1<=n2){
		d=contarDigitos(n2);
		r=((n1*powf(10,d))+n2);
	}
	else{
		d=contarDigitos(n1);
		r=((n2*powf(10,d))+n1);
	}
	return r;
}

//2. Escriba una funcion que reciba como parametro un numero natural y devuelva el mismo numero, pero depurando los digitos repetidos.
int digRepetido(int Num){
	int s, aux, d1, d2, c;
	aux=Num;
	while(Num>0){
		d1=Num%10;
		c=0;
		s=aux;
		while(s>0){
			d2=s%10;
			if(d2==d1){
				c++;
			}
			s=s/10;
		}
		if(c>1){
			return(d1);
		}
		Num=Num/10;
	}
	return(-1);
}

int eliminarDig(int Num, int dig){
	int x,s=0,m=1;
		while(Num>0){
			x=Num%10;
			if(x!=dig){
				s=s+(x*m);
				m=m*10;
			}
			Num=Num/10;
		}
		return(s);
}


void eliminarRepetidos(){
	int Num,d;
		cout<<"Ingrese un numero: ";
		cin>>Num;
		d=digRepetido(Num);
		while(d!=(-1)){
			Num=eliminarDig(Num,d);
			d=digRepetido(Num);
		}
		cout<<Num;
}


//3. Invertir un numero natural.

void invertir(int n){
	int d=0;
	while(n!=0){
		d=d*10;
		d=d+(n%10);
		n=n/10;
	}
	cout<<endl<<"El numero invertido es: "<<d;
}
 
//Crear una función que calcule el cubo de un número real (float). El resultado deberá ser otro número real.
void cubo(float n){
	float c=0;
			c = powf(n,3);
	cout<<endl<<"EL cubo es : "<<c;
}

//Crear una función que calcule cual es el menor de dos números enteros.
void verifMenor(int num1, int num2){
	if(num1>num2){
		cout<<endl<<"El numero menor es: "<<num2;
	}
	else{
		cout<<endl<<"El numero menor es: "<<num1;
	}
}

//Crear una función llamada �signo�, que reciba un número real, y devuelva un número entero con el valor: -1 si el número es negativo, 1 si es positivo o 0 si es cero.
void signo(float n){
int r=0;
if(n==0){
	cout<<endl<<"0";
}
else{
	if(n>0){
		cout<<endl<<"1";
	}
	else{
		cout<<endl<<"-1";
	}
}
}

//7.- Insertar un digito en el lugar que le corresponda en un numero natural ordenado si nro es 2579 y digito es 8 entonces debe retornar 25789. 
int numOrdenado(int Num){
	int menor=10, band=0,d;
		while(Num>0){
			d=Num%10;
			Num=Num/10;
			if(menor>d){
				menor=d;
			}
			else{
			band=1;
			}
		}
		return(band);
}

int insertarNumLugarCorresp(int Num){
	int band,dig,NuevoNum=0,c=0,d1,d2,bande=0;
		band=numOrdenado(Num);
		while(band==1){
		cout<<"Ingrese otro numero (ORDENADO): ";
		cin>>Num;
		band=numOrdenado(Num);
		}
		cout<<"Ingrese un digito: ";
		cin>>dig;

		while(Num>0){
			d1=Num%10;
			Num=Num/10;
			if(dig>d1 && bande==0){
				NuevoNum=NuevoNum + (dig*powf(10,c));
				c++;
				NuevoNum=NuevoNum + (d1*powf(10,c));
				c++;
				bande=1;
			}
			else{
				NuevoNum=NuevoNum + (d1*powf(10,c));
				c++;
			}

		}
		if(bande==0){
			NuevoNum=NuevoNum + (dig*powf(10,c));
		}
		return(NuevoNum);
	}

//8.- Verificar si es capicua

int invertirnumero(int n){
	int inv=0,d;
	while(n>0){
	inv = inv * 10;
			inv = inv + n % 10;
			n = n / 10;

	}
	return inv;
}

void capicua(int n){
	int d;
	d=invertirnumero(n);
	if(d==n){
		cout<<endl<<"Es capicua.";
	}
	else{
		cout<<endl<<"No es capicua.";
	}
}

/*9.- Desarrolle un algoritmo para la empresa Constructora TILUCHI, que le permita calcular 
e imprimir la planilla para su cancelación a un total de “n” obreros calificados a 
quienes debe cancelar por horas trabajadas. La hora trabajada es Bs. 20. */
void calcularPrecio(int no, int horas){
	int pago=0;
	int precio=20;
	if(no>0){
		pago=no*horas*precio;
	}
	cout<<endl<<"Se debera cancelar por "<<no<<" obreros y "<<horas<<" trabajadas : "<<pago;
}

/*10.-  Un número se dice automórfico si su cuadrado termina en los mismos dígitos que el número original, por ejemplo 25 = 625,            762= 5776,     Realizar un 
algoritmo que genere los números automórficos  menores que 1000.*/
int cuadrado(int n){
	int c;
	while(n>0){
		c=powf(n,2);
	}
	return c;
}

bool verifautomorfico(int n){
	bool b=false;
	int aux,d,e,base;
	aux=powf(n,2);
	d=contarDigitos(n);
	base=powf(10,d);
	e=aux%base;
	if(n==e){
		b=true;
	}
	return b;
}

void generarA(){
	int i=0;
	for(i=0;i<1000;i++){
	if(verifautomorfico(i)==true){
		cout<<i<<" ";
	}
	}
}

/* Dado un número entero positivo, su crápulo es un número que se obtiene de la 
siguiente forma: se suman los dígitos que lo componen si el valor de la suma es menor 
que 10, el crápulo es el valor obtenido sino el crápulo es el crápulo de la suma de los 
dígitos. Escriba un algoritmo que lea un entero positivo y escriba el valor de su 
crápulo.*/

void crapulo(int n){
	int aux=0,d;
	while(n>0){
		d=n%10;
		aux=aux+d;
		n=n/10;
	}
	cout<<endl<<aux;
}

/* Serie 1 Implementar una función que genere: 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33*/
void serie1(int n){
	int a=0,i=0;
	while(i<n){
		a=a+3;
		cout<<a<<" ";
		i++;
	}
}

/* Implementar una función que genere: 1, 4, 9, 61, 52, 63, 94... */
void serie2(int n){
	int a=1,i=0,d;
	while(i<n){
	d=powf(a,2);
	d=invertirnumero(d);
		cout<<d<<" ";
		a++;
		i++;
	}
}
/* Implementar una función que genere: 1, 1, 2, 4, 8, 16, 23, 28, 38, 49,...*/
int sumardigitos(int a){
	int s=0,d;
	while(a>0){
		d=a%10;
		a=a/10;
		s=s+d;
	}
	return s;
}


void serie3(int n){
	int d=1, i,Num=0;
	cout<<d<<" ";
	for(i=0;i<n;i++){
		Num=Num+d;
		d=sumardigitos(Num);
		cout<<Num<<" ";
	}
}

/*14. Implementar una función que genere: 1, 1, 2, 4, 8, 7, 5, 10, 11, 13, 8,... */
void funcion4(int n){
	int d=1, i,Num=0;
	cout<<d<<" "
	for(i=0;i<n;i++){
		Num=Num+d;
		d=sumardigitos(Num);
		cout<<d<<" ";
	}
}


int main(){
	int opcion, num1,num2,r;
	float r1, num;
	do{
		cout<<endl<<endl<<"MENU";
		cout<<endl<<endl<<"1.- Unir numero Mayor al numero Menor.";
		cout<<endl<<"2.- Eliminar digitos repetidos.";
		cout<<endl<<"3.- Invertir un numero natural.";
		cout<<endl<<"4.- Calcular el cubo de un numero.";
		cout<<endl<<"5.- Calcule cual es el menor de dos números enteros.";
		cout<<endl<<"6.- Signo.";
		cout<<endl<<"7.- Insertar digito ordenado.";
		cout<<endl<<"8.- Capicua.";
		cout<<endl<<"9.- Pago de trabajadores TILUCHI";
		cout<<endl<<"11.- automorficos < 1000.";
		cout<<endl<<"12.- Crapulo.";
		cout<<endl<<"13.- Serie 1.";
		cout<<endl<<"14.- Serie 2.";
		cout<<endl<<"15.- Serie 3";
		cout<<endl<<"16.- Serie 4.";
		cout<<endl<<"0.- Salir.";
		cout<<endl<<endl<<"Ingrese su opcion: ";
		cin>>opcion;
	switch(opcion){
	case 1: cout<<endl<<"Ingrese numero: ";
		cin>>num1;
		cout<<endl<<"Ingrese numero: ";
		cin>>num2;
		r=unirMayorAlMenor(num1,num2);
		cout<<endl<<"El numero unido es: "<<r;
			getch();
		break;
	case 2: eliminarRepetidos();
		getch();
		break;
	case 3: cout<<endl<<"Ingrese un numero: ";
		cin>>num1;
		invertir(num1);
		break;
	case 4:cout<<endl<<"Ingrese un numero: ";
		cin>>num;
		cubo(num);
		getch();
		break;
	case 5: cout<<endl<<"Ingrese un numero: ";
		cin>>num1;
		cout<<endl<<"Ingrese otro numero: ";
		cin>>num2;
		verifMenor(num1,num2);
		break;
	case 6: cout<<endl<<"Ingrese un numero: ";
		cin>>num;
		signo(num);
		break;
	case 7: cout<<endl<<"Ingrese un numero: ";
		cin>>num;
		r=insertarNumLugarCorresp(num);
		cout<<r;
		break;
	case 8:  cout<<endl<<"Ingrese un numero: ";
		cin>>num;
			capicua(num);
			break;
	case 9: cout<<endl<<"Ingrese numero de tabajadores: ";
		cin>>num1;
		cout<<endl<<"Ingrese horas trabajadas: ";
		cin>>num2;
		calcularPrecio(num1,num2);
		break;
		case 11: generarA();
		break;
	case 12: cout<<endl<<"Ingrese un numero: ";
		cin>>num1;
		crapulo(num1);
	case 13:cout<<endl<<"Ingrese un numero limite de la serie: ";
		cin>>num1;
		serie1(num1);
		break;
	case 14: cout<<endl<<"Ingrese un numero limite de la serie: ";
		cin>>num1;
		serie2(num1);
		break;
	case 15:cout<<endl<<"Ingrese un numero limite de la serie: ";
		cin>>num1;
		serie3(num1);
		break;
	case 16: cout<<endl<<"Ingrese un numero limite de la serie: ";
		cin>>num1;
		funcion4(num1);
		break;
	}
	}while(opcion!=0);
	getch();
	return 0;
}
